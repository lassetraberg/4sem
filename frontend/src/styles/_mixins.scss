// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

// =============================================================================
// Theme Aware Style
// =============================================================================
@mixin theme($theme: ".theTheme") {
    :host-context(#{$theme}){
        @content;
    }
}

// =============================================================================
// Location Aware Style
// =============================================================================
@mixin location($location: ".theLocation") {
    :host-context(#{$location}){
        @content;
    }
}


// =============================================================================
// Responsiveness
// =============================================================================

// The container horizontal gap, which acts as the offset for breakpoints
$gap: 32px;
// 960, 1152, and 1344 have been chosen because they are divisible by both 12 and 16
$tablet: 769px;
// 960px container + 3rem
$desktop: 960px + (2 * $gap);
// 1152px container + 3rem
$widescreen: 1152px + (2 * $gap) ;
// 1344px container + 3rem
$fullhd: 1344px + (2 * $gap) ;

@mixin from($device) {
    @media screen and (min-width: $device) {
      @content;
    }
  }
  
  @mixin until($device) {
    @media screen and (max-width: $device - 1px) {
      @content;
    }
  }
  
  @mixin mobile {
    @media screen and (max-width: $tablet - 1px) {
      @content;
    }
  }
  
  @mixin tablet {
    @media screen and (min-width: $tablet), print {
      @content;
    }
  }
  
  @mixin tablet-only {
    @media screen and (min-width: $tablet) and (max-width: $desktop - 1px) {
      @content;
    }
  }
  
  @mixin touch {
    @media screen and (max-width: $desktop - 1px) {
      @content;
    }
  }
  
  @mixin desktop {
    @media screen and (min-width: $desktop) {
      @content;
    }
  }
  
  @mixin desktop-only {
    @media screen and (min-width: $desktop) and (max-width: $widescreen - 1px) {
      @content;
    }
  }
  
  @mixin widescreen {
    @media screen and (min-width: $widescreen) {
      @content;
    }
  }
  
  @mixin widescreen-only {
    @media screen and (min-width: $widescreen) and (max-width: $fullhd - 1px) {
      @content;
    }
  }
  
  @mixin fullhd {
    @media screen and (min-width: $fullhd) {
      @content;
    }
  }
  